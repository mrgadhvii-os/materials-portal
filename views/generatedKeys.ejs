<div class="card">
    <div class="card-header bg-primary text-white">
        <h3><i class="fas fa-list me-2"></i> Generated URL Keys</h3>
    </div>
    <div class="card-body">
        <div class="alert alert-info">
            <p><i class="fas fa-info-circle me-2"></i> Here are your previously generated URL keys.</p>
        </div>
        
        <div class="key-box p-4 bg-light border rounded mb-4">
            <h4 class="mb-3">Your API Token</h4>
            <div class="input-group mb-3">
                <input type="text" id="api-token" class="form-control" value="8089838e6df9651423a7f87cd8bfe2c56378ee4c" readonly>
                <button class="btn btn-success" type="button" id="copy-token-btn">
                    <i class="fas fa-copy me-1"></i> Copy
                </button>
            </div>
        </div>
        
        <div id="keys-container">
            <div class="text-center p-5" id="loading-indicator">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading your keys...</p>
            </div>
            
            <div id="no-keys-message" class="text-center p-5 d-none">
                <i class="fas fa-exclamation-circle fa-3x text-warning mb-3"></i>
                <h4>No keys found</h4>
                <p>You haven't generated any URL keys yet.</p>
            </div>
            
            <div class="table-responsive d-none" id="keys-table-container">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Original URL</th>
                            <th>Shortened URL</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="keys-table-body">
                        <!-- Will be populated dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="text-center mt-4">
            <a href="/generateKey" class="btn btn-primary">
                <i class="fas fa-plus-circle me-1"></i> Generate New Key
            </a>
            <a href="/" class="btn btn-outline-primary ms-2">
                <i class="fas fa-home me-1"></i> Back to Home
            </a>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize Firebase
    const firebaseConfig = {
        apiKey: "AIzaSyAVrK3QW1jlREARB7M9e2igW2F6EtVP3Iw",
        authDomain: "gec-wave.firebaseapp.com",
        databaseURL: "https://gec-wave-default-rtdb.firebaseio.com",
        projectId: "gec-wave",
        storageBucket: "gec-wave.firebasestorage.app",
        messagingSenderId: "1095163626038",
        appId: "1:1095163626038:web:5bf07b161005a665e30e97",
        measurementId: "G-12VHF7SJ6M"
    };
    
    // Check if Firebase is already initialized
    if (!firebase.apps.length) {
        firebase.initializeApp(firebaseConfig);
    }
    
    const db = firebase.database();
    
    // Copy token button
    document.getElementById('copy-token-btn').addEventListener('click', function() {
        const tokenInput = document.getElementById('api-token');
        tokenInput.select();
        document.execCommand('copy');
        alert('API token copied to clipboard!');
    });
    
    // Load keys from Firebase
    const loadingIndicator = document.getElementById('loading-indicator');
    const noKeysMessage = document.getElementById('no-keys-message');
    const keysTableContainer = document.getElementById('keys-table-container');
    const keysTableBody = document.getElementById('keys-table-body');
    
    db.ref('generatedKeys').orderByChild('createdAt').once('value')
        .then(snapshot => {
            loadingIndicator.classList.add('d-none');
            
            if (!snapshot.exists()) {
                noKeysMessage.classList.remove('d-none');
                return;
            }
            
            const keys = [];
            snapshot.forEach(childSnapshot => {
                const key = childSnapshot.val();
                key.id = childSnapshot.key;
                keys.push(key);
            });
            
            // Sort by creation date (newest first)
            keys.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            
            if (keys.length === 0) {
                noKeysMessage.classList.remove('d-none');
                return;
            }
            
            // Populate table
            keysTableContainer.classList.remove('d-none');
            keys.forEach((key, index) => {
                const row = document.createElement('tr');
                
                const createdDate = new Date(key.createdAt);
                const formattedDate = createdDate.toLocaleDateString() + ' ' + 
                                     createdDate.toLocaleTimeString();
                
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td><a href="${key.originalUrl}" target="_blank">${truncateUrl(key.originalUrl, 40)}</a></td>
                    <td><a href="${key.shortenedUrl}" target="_blank">${key.shortenedUrl}</a></td>
                    <td>${formattedDate}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary copy-url-btn" data-url="${key.shortenedUrl}">
                            <i class="fas fa-copy"></i>
                        </button>
                    </td>
                `;
                
                keysTableBody.appendChild(row);
            });
            
            // Add event listeners to copy buttons
            document.querySelectorAll('.copy-url-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const url = this.getAttribute('data-url');
                    
                    // Create temporary input
                    const tempInput = document.createElement('input');
                    tempInput.value = url;
                    document.body.appendChild(tempInput);
                    tempInput.select();
                    document.execCommand('copy');
                    document.body.removeChild(tempInput);
                    
                    alert('URL copied to clipboard!');
                });
            });
        })
        .catch(error => {
            console.error('Error loading keys:', error);
            loadingIndicator.classList.add('d-none');
            
            const errorMessage = document.createElement('div');
            errorMessage.className = 'alert alert-danger';
            errorMessage.textContent = 'Failed to load keys. Please try again later.';
            document.getElementById('keys-container').appendChild(errorMessage);
        });
    
    // Helper function to truncate URLs
    function truncateUrl(url, maxLength) {
        if (url.length <= maxLength) return url;
        return url.substring(0, maxLength) + '...';
    }
});
</script> 